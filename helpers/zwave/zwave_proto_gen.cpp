#include <fstream>
#include <set>
#include <string>
#include <valarray>

extern "C" {
#include <zwaveip/zw_cmd_tool.h>
}

int main(int argc, char* argv[]) {
  std::ofstream os;
  os.open("zwave_commands.proto", std::ofstream::out | std::ofstream::trunc);

  os << "// Proto generated by '" << argv[0] << "'" << std::endl
     << "// Do not edit!" << std::endl
     << std::endl;

  os << "syntax = \"proto3\";" << std::endl;
  os << "package matrix_malos;" << std::endl << std::endl;

  int n;
  std::valarray<const char*> names(512);
  std::set<std::string> class_names;
  std::set<std::string> cmd_names;

  n = zw_cmd_tool_get_command_class_names(&names[0]);

  for (auto& class_name :
       std::valarray<const char*>(names[std::slice(0, n, 1)])) {
    class_names.insert(std::string(class_name));
  }

  int index = 0;
  os << "enum EnumZWaveClassType {" << std::endl;
  for (auto& class_name : class_names) {
    os << "  " << class_name << " = " << (index++) << ";" << std::endl;
  }
  os << "}" << std::endl << std::endl;

  for (auto& class_name : class_names) {
    const zw_command_class* p_class_class =
        zw_cmd_tool_get_class_by_name(class_name.c_str());

    n = zw_cmd_tool_get_cmd_names(p_class_class, &names[0]);

    for (auto& cmd_name :
         std::valarray<const char*>(names[std::slice(0, n, 1)])) {
      cmd_names.insert(std::string(cmd_name));
    }
  }

  index = 0;
  os << "enum EnumZWaveCommandType {" << std::endl;
  for (auto& cmd_name : cmd_names) {
    os << "  " << cmd_name << " = " << (index++) << ";" << std::endl;
  }
  os << "}" << std::endl << std::endl;

  os.close();

  return 0;
}
