/*
 * Copyright 2016 <Admobilize>
 * All rights reserved.
 */

syntax = "proto3";

package matrix_malos;

// configuration of drivers. Both global configuration and
// for specific drivers.
message DriverConfig {
  // Delay between updates. In seconds.
  float delay_between_updates = 1;
  // Timeout after last ping.
  float timeout_after_last_ping = 2;

  // Values for LEDs. When configuring the driver you should leave
  // delay_between_updates and timeout_after_last_ping unchanged.
  EverloopImage image = 3;

  // Malos-Eye configuration.
  MalosEyeConfig malos_eye_config = 4;

  // ZigBee configuration for bulbs.
  ZigbeeBulbConfig zigbee_bulb = 5;

  // LIRC service configuration for IR commands.
  LircParams lirc = 6;

  // ServoMotor service configuration 
  ServoParams servo = 7;

  // ZigBee Message.
  ZigBeeMsg zigbee_message = 8;
}


enum EnumMalosEyeDetectionType {
  // Stop. Don't do detections.
  // This only makes sense when this is the only command sent to MalosEye.
  STOP = 0;
  // Detect faces.
  FACE = 20;
  // Detect faces and enhance the detection with demographics.
  // This might involve a connection to a remote detection server.
  FACE_DEMOGRAPHICS = 21;
  // Thumb.
  HAND_THUMB_UP = 40;
  HAND_PALM = 41;
  HAND_PINCH = 42;
  HAND_FIST = 43;
}

// Configuration for MALOS-eye. If object_to_detect has at least
// one element the rest of the configuration will be ignored and the
// objects to be detected will change acordingly.
message MalosEyeConfig {
  // Camera configuration. Camera id, width, height, and so on.
  CameraConfig camera_config = 1;
  // Configuration of the object detector.l
  ObjectDetectorConfig detector_config = 2;
  // Tracker configuration.
  TrackerConfig tracker_config = 3;
  // Configuration of the detection server.
  DetectionServerConfig detection_server_config = 4;
  // Detections to perform. When this field is set the other fields
  // are ignored.
  repeated EnumMalosEyeDetectionType object_to_detect = 21;
}

message CameraConfig {
  // What camera to open? 0 is usually the first camera.
  int32 camera_id = 1;
  // Capture width, i.e. 640.
  int32 width = 2;
  // Capture height, i.e. 480.
  int32 height = 3;
}

message ObjectDetectorConfig {
  // Cascade path that the program can open
  string cascade_path = 1;
}

// These settings could depend on time and not on frames, as frame-rate
// depends on the resolution.
message TrackerConfig {
  // In how many frames does the object need to be before being taken
  // into account?
  int32 frames_to_count = 1;
  // Once we stop seeing the object, how many frames should we wait before
  // we discard the object?
  int32 frames_to_discard = 2;
}

message DetectionServerConfig {
  // Detection server connection string. For instance, "127.0.0.1:32061".
  string detection_server_address = 1;
  // Timeout for detection server (in milliseconds).
  int32 detection_server_timeout = 2;
}

// Message used by MALOS to report its internal state and the configuration of
// its drivers.
message DriverInfo {
  // Driver name.
  string driver_name = 1;
  // Base port: Port where the device is located.
  // base_port => config channel (0MQ pull, you should push)
  // base_port + 1 => keepalive channel (0MQ pull, you should push)
  // base_port + 2 => error channel (0MQ push, you should pull)
  // base_port + 3 => send update channel (0MQ push, you should pull)
  int32 base_port = 2;

  // Does the device provide updates? Some devices such as the everloop
  // LED array don't provide updates.
  bool provides_updates = 3;
  // What is the device delay between updates? In milliseconds.
  // This field only makes sense if provides_updates is set.
  int32 delay_between_updates = 4;

  // Does the device need pings (keepalive messages) to keep returning messages?
  bool needs_pings = 5;
  // This field only makes sense if needs_pings is set.
  // If the device hasn't received keepalive messages in a time interenal
  // bigger than this amount, the device will stop sending updates.
  int32 timeout_after_last_ping = 6;

  // Notes set by the driver. Meant to be read by humans.
  string notes_for_human = 7;
}

// Information about all the available drivers.
message MalosDriverInfo {
  // The available drivers.
  repeated DriverInfo info = 1;
}

// Dummy lecture.
message Dummy {
  // Random value.
  float value = 1;
}

// Basic Humidity lecture.
message Humidity {
  // Humidity.
  float humidity = 1;

  // Temperature.
  float temperature = 2;
}

// Basic UV radiation lecture.
message UV{
  // UV index.
  float uv_index = 1;

  // Risk of harm from unprotected sun exposure, for the average adult.
  // Accordin to the OMS table. https://www.epa.gov/sunsafety/uv-index-scale-0
  string oms_risk = 2;
}


// Basic Pressure lecture.
message Pressure {
  // Pressure.
  float pressure = 1;

  // Altimeter.
  float altitude = 2;

  // Temperature.
  float temperature = 3;
}


// Basic Pressure lecture.
message Imu {
  //Vertical axis (yaw)
  float yaw = 1;

  //Lateral axis (pitch)
  float pitch = 2;

  //Longitudinal axis (roll)
  float roll = 3;
}

// Value for a led. Values range from 0 to 255.
message LedValue {
  uint32 red = 1;
  uint32 green = 2;
  uint32 blue = 3;
  uint32 white = 4;
}

// The led array.
message EverloopImage {
  repeated LedValue led = 1;
}


/* ZigBee messages */

// ZigBee message
message ZigBeeMsg {

  // Zigbee command types definition
  enum ZigBeeCmdType {
    ZCL = 0;
    ZLL = 1;
    NETWORK_MGMT = 2;
  }

  // ZigBee Cluster Library command definition
  message ZCLCmd {
    
    // ZCL commands type
    enum ZCLCmdType  {
      ON_OFF = 0;
      LEVEL = 1;
      COLOR_CONTROL = 2;
      IDENTIFY = 3;
    }

    // OnOff command definition
    message OnOffCmd {
    
      enum ZCLOnOffCmdType  {
        ON = 0;
        OFF = 1;
        TOGGLE = 2;
      }  

      // ZCL OnOff command type
      ZCLOnOffCmdType type = 1;

      // Params not required for ZCL OnOff cluster commands 
    }

    // Level command definition
    message LevelCmd {
    
      // ZCL Level commands types
      enum ZCLLevelCmdType  {
        MOVE_TO_LEVEL = 0;  
        MOVE = 1;
        // STEP = 2;
        // STOP = 3;
        // MOVE_TO_LEVEL_ONOFF = 4;
        // MOVE_ONOFF = 5;
        // STEP_ONOFF = 6;
        // STOP_ONOFF = 7;
      }

       // MoveToLevel command parameters
      message MoveToLevelCmdParams{
        // level param <uint8>: The meaning of ‘level’ is device dependent – e.g. for a light it may mean brightness level.
        uint32  level  = 1;
        // Transition time <uint16>
        uint32 transition_time  = 2;
      }

      // Move command parameters
      message MoveCmdParams{
        // |Fade Mode Value | Description  |
        // |      0x00      |     Up       |
        // |      0x01      |    Down      |
        uint32  mode  = 1;
        //Rate <uint8>: specifies the rate of movement in units per second.
        uint32 rate  = 2;
      }

      ZCLLevelCmdType type = 1;

      // MoveToLevel command
      MoveToLevelCmdParams move_to_level_params = 2;
      
      // Move command
      MoveCmdParams move_params = 3;
    }

    // Color Control command definition
    message ColorControlCmd {
    
      // ZCL ColorControl command types
      enum ZCLColorControlCmdType  {
        MOVETOHUE = 0;
        MOVETOSAT = 1;
        MOVETOHUEANDSAT = 2;
        // MOVEHUE = 3;
        // STEPHUE = 4;
        // MOVESAT = 5;
        // STEPSAT = 6;
        // MOVETOCOLOR = 7;
        // MOVECOLOR = 8;
        // STEPCOLOR = 9;
        // MOVETOCOLORTEMPERATURE = 10;
      }

      // MoveToHue command
      message MoveToHueCmdParams{

        // Values of the Direction Param
        enum DirectionParam{
          SHORTEST_DISTANCE = 0;
          LONGEST_DISTANCE = 1;
          UP = 2;
          DOWN = 3;
        }

        // Hue <uint8>: specifies the hue to be moved to.
        uint32 hue = 1;   
        
        // Direciton param 
        DirectionParam direction  = 2;  

        //Transition time <uint16> : specifies, in 1/10ths of a second, the time that shall be taken to move to the new hue
        uint32 transition_time = 3;
      }

      message MoveToSatCmdParams {

        // Saturation <uint8>
        uint32 saturation = 1;

        // Transition Time <uint16>
        uint32 transition_time = 2;
      }

      message MoveToHueAndSatCmdParams {

        // Hue <uint8>
        uint32 hue = 1;

        // Saturation <uint8>
        uint32 saturation = 2;

        // Transition Time <uint16>
        uint32 transition_time = 3;
      }

      // ZCLColorControl command type
      ZCLColorControlCmdType type = 1;

      // MoveToHue command params
      MoveToHueCmdParams movetohue_params = 2;

      // MoveToSat commands params 
      MoveToSatCmdParams movetosat_params = 3;

      // MoveToHueAndSat commands params
      MoveToHueAndSatCmdParams movetohueandsat_params = 4;
    }

    //ZCL Identify command type
    message IdentifyCmd{
      
      enum ZCLIdentifyCmdType  {
        // The IDENTIFY command starts or stops the receiving device identifying itself.
        IDENTIFY = 0;
        // The IDENTIFY_QUERY command allows the sending device to request the target or
        // targets to respond if they are currently identifying themselves.
        // This command has no payload.
        IDENTIFY_QUERY = 1;
      }

      message IdentifyCmdParams {
        // Transition Time <uint16>
        uint32 identify_time = 2;
      }
      
      ZCLIdentifyCmdType type = 1;

      IdentifyCmdParams identify_params = 2;
    }

    // ZCL command type
    ZCLCmdType type = 1;

    // OnOff command
    OnOffCmd onoff_cmd = 2;

    // Level command
    LevelCmd level_cmd = 3;

    // Color control command
    ColorControlCmd colorcontrol_cmd = 4;

    // Identify command
    IdentifyCmd identify_cmd = 5;
  }

  // ZigBee Light Link command definition
  message ZLLCmd{}

  // Network management command definition
  message NetworkMgmtCmd{

    // NetworkMgmt command types
    enum NetworkMgmtCmdTypes {
      CREATE_NWK = 0;  // Creates a new network. No params required
      LEAVE_NWK = 1;  // Leave the current network. No params required
      NODE_LEAVE_NWK = 2;  // Ask a specific node to leave the current network.
      PERMIT_JOIN = 3; // Permit other devices to join the network for a time period.
      NODE_INFO = 4; // Get all the info of the zigbee network and all the devices connected. No params required
      DISCOVERY_INFO = 5; // Gets all the info from the devices connected to the network. No params required
      RESET_PROXY = 6; // Reset the proxy app . No params required
      IS_PROXY_ACTIVE = 7; // TRUE if the conection between the proxy and the ZigBee chip is active. No params required
      // The Proxy is the app that talks with the ZigBee chip via 
      // COMs and with the MALOS services using Sockets.
    }

    // PermitJoin Params Definition
    message PermitJoinParams{
      // Joining time : Number of seconds during which devices will be allowed to join the network
      uint32 time = 1;
    }

    // Is Proxy Active Params Definition
    message IsProxyActiveParams{
      bool is_proxy_active = 1;
    }

    // Node Leave Network Params Definition
    message NodeLeaveNetParams{
      // Node Id of the Node you want to leave the network
      uint32 NodeId = 1;
    }

    // CLuster Description Definition
    message ClusterDescription{
      enum ClusterInOutType{
        SERVER_IN = 0;
        CLIENT_OUT = 1;
      }
      // Cluster server/client type: server (IN) or client (OUT) implementation
      ClusterInOutType type = 1;
      // Cluster ID : ex 0x0006 (On/off),  0x0008 (Level Control), 0x0201 (Thermostat)
      uint32 cluster_id = 2;
      // Cluster type name : 
      string cluster_name = 3;
    }

    // Profile Description Definition
    message ProfileDescription{
      // Profile ID : ex 0x0104 
      uint32 profile_id = 1;
      // Profile type name : ex "Home Automation"
      string profile_name = 2;
    }

    // EndPoint Description Definition
    message EndPointDescription{
      // EndPoint Profile  
      ProfileDescription profile ;
      // EndPoint Clusters
      repeated ClusterDescription clusters = 1;
    }

    // Node Info Definition
    message NodeDescription{
      // NodeId of the Node created by the Matrix Creator
      uint32 nodeId = 1;
      // EUI64 of the Node created by the Matrix Creator
      uint32 eui64 = 2;
      // EndPoints in the Node
      repeated EndPointDescription  endpoints = 3;
    }

    // Node connected info
    message DiscoveryInfoDescription{
      repeated NodeDescription nodes = 1;
    }

    // NetworkMgmt command type
    NetworkMgmtCmdTypes type = 1;

    // PermitJoin params
    PermitJoinParams permitjoin_params = 2;
    
    // Is Proxy Active params
    IsProxyActiveParams is_proxy_active = 3;

    // Node Leave Network params
    NodeLeaveNetParams node_leave_params = 4;

    // Node Info 
    NodeDescription node_info  = 5;

    // Discovery Nodes info
    DiscoveryInfoDescription connected_nodes = 6;
  }

  // Zigbee command type
  ZigBeeCmdType type = 1;

  // ZigBee Cluster Library command
  ZCLCmd zcl_cmd = 2;

  // ZigBee Light Link command
  ZLLCmd zll_cmd = 3;

  // Network management commnad
  NetworkMgmtCmd network_mgmt_cmd = 4;

 }

message ZigbeeBulbConfig {
    // IP address or host name.
    string address = 1;
    // The port.
    int32 port = 2;
    // ZigBee command.
    ZigBeeBulbCmd command = 3;
}

// Network start event
message ZigBeeNetworkStatus {
  // ZigBee is active
  bool is_active = 1;
  
  // ID shared by all nodes in the network
  uint32 pan_id = 2;

  // ID of the node  (in the network)
  uint32 short_id = 3;
}

// ZigBee device announce
message ZigBeeAnnounce {
  // ID of the announced node
  uint32 short_id = 1;

  // Cluster Id for ZCL command
  uint32 cluster_id = 2;

  // ZigBee device object command
  uint32 zdo_command = 3;

  // ZigBee device object status
  uint32 zdo_status = 4;
}

// ZigBee bulb commands
message ZigBeeBulbCmd {
  // ID of the bulb node
  uint32 short_id = 1;

  // Enpoint. This is used in the send commands after the
  // short_id. We are still figuring out how to use the ZigBee protocol for
  // bulbs thus for the moment we will assume that when this value is 0xb
  // we're dealing with a Philips bulb, and when it's 0 (default value) we're
  // using a generic brand (whatever that means, we need to do more tests).
  uint32 endpoint = 4;

  enum EnumCommands {
    ON = 0;
    OFF = 1;
    TOGGLE = 2;
    LEVEL = 3;
    IDENTIFY = 4;
    COLOR = 5;
  }

  // Bulb commands
  EnumCommands command = 2;

  // Params of the bulb commands. Used by LEVEL and COLOR commands.
  repeated uint32 params  = 3;
}


// LIRC service params
message LircParams {
  // IR remote device name
  string device = 1;

  // IR command
  string command = 2;
}

// Servo handler params
message ServoParams {
  // GPIO to config
  uint32 pin = 1;

  // GPIO mode
  uint32 angle = 2; 
}
